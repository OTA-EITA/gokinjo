name: Quality Check (Morning & Evening)

on:
  schedule:
    - cron: '0 0 * * *'   # 午前9時 JST (UTC 0:00)
    - cron: '0 12 * * *'  # 午後9時 JST (UTC 12:00)
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

jobs:

  # ====================================================================
  # 朝: Lighthouse Performance Report
  # ====================================================================
  morning-lighthouse:
    if: github.event.schedule == '0 0 * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Morning Quality Check (Lighthouse)

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run Lighthouse CI
        working-directory: ./frontend
        continue-on-error: true
        run: |
          npm install -g @lhci/cli
          npx lhci autorun || echo "Lighthouse run completed with warnings"

      - name: Configure git user from secrets
        run: |
          git config --local user.name "${{ secrets.GIT_USER_NAME }}"
          git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Auto commit daily marker (morning)
        run: |
          echo "morning_run=$(date -u)" > data/morning_run.txt
          git add data/morning_run.txt
          git commit -m "auto: morning quality check run $(date -u)" || echo "No changes to commit"
          git pull --rebase origin master || echo "No rebase needed"
          git push origin master || echo "Push skipped"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create morning performance issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = '${{ steps.date.outputs.date }}';
            const issueBody = `## 朝の品質チェックレポート ${date}

            ### Lighthouse CI 実行結果
            詳細レポートは Artifacts を参照してください。

            ---
            *自動生成レポート by GitHub Actions*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[品質レポート] 朝の定期チェック ' + date,
              body: issueBody,
              labels: ['lighthouse', 'performance', 'automated']
            });

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-${{ steps.date.outputs.date }}
          path: frontend/.lighthouseci/


  # ====================================================================
  # 夜: Data Quality & Security Check
  # ====================================================================
  evening-quality:
    if: github.event.schedule == '0 12 * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Evening Quality Check (Lint, Security, Safety)

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install ruff bandit safety jq

      - name: Run Ruff linting
        id: ruff
        continue-on-error: true
        run: |
          ruff check airflow/ scripts/ > ruff-report.txt 2>&1 || true
          echo "ruff_issues=$(wc -l < ruff-report.txt)" >> $GITHUB_OUTPUT

      - name: Run Bandit security scan
        id: bandit
        continue-on-error: true
        run: |
          bandit -r airflow/ scripts/ -f json -o bandit-report.json || true
          echo "bandit_issues=$(jq '.results | length' bandit-report.json 2>/dev/null || echo 0)" >> $GITHUB_OUTPUT

      - name: Check dependency vulnerabilities
        id: safety
        continue-on-error: true
        run: |
          pip freeze | safety check --json > safety-report.json || true
          echo "safety_issues=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo 0)" >> $GITHUB_OUTPUT

      - name: Configure git user from secrets
        run: |
          git config --local user.name "${{ secrets.GIT_USER_NAME }}"
          git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Auto commit daily marker (evening)
        run: |
          echo "evening_run=$(date -u)" > data/evening_run.txt
          git add data/evening_run.txt
          git commit -m "auto: evening quality check run $(date -u)" || echo "No changes to commit"
          git pull --rebase origin master || echo "No rebase needed"
          git push origin master || echo "Push skipped"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create evening quality issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = '${{ steps.date.outputs.date }}';
            const ruff = '${{ steps.ruff.outputs.ruff_issues }}' || '0';
            const bandit = '${{ steps.bandit.outputs.bandit_issues }}' || '0';
            const safety = '${{ steps.safety.outputs.safety_issues }}' || '0';

            const issueBody = `## 夜の品質チェックレポート ${date}

            ### コード品質チェック結果
            - Ruff: ${ruff} 件
            - Bandit: ${bandit} 件
            - Safety: ${safety} 件

            ---
            *自動生成レポート by GitHub Actions*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[品質レポート] 夜の定期チェック ' + date,
              body: issueBody,
              labels: ['quality', 'security', 'automated', 'evening-check']
            });

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports-${{ steps.date.outputs.date }}
          path: |
            ruff-report.txt
            bandit-report.json
            safety-report.json
