name: Quality Check (Morning & Evening)

on:
  schedule:
    - cron: '0 0 * * *'   # 午前9時 JST (UTC 0:00)
    - cron: '0 12 * * *'  # 午後9時 JST (UTC 12:00)
  workflow_dispatch:
  pull_request:
    paths:
      - 'frontend/**'
      - 'airflow/**'
      - 'scripts/**'

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

concurrency:
  group: quality-check-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # ====================================================================
  # 朝: Lighthouse Performance Report
  # ====================================================================
  morning-lighthouse:
    if: github.event.schedule == '0 0 * * *' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Morning Quality Check (Lighthouse)

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        continue-on-error: true
        run: npm run lint

      - name: Build production bundle
        run: npm run build

      - name: Verify build output
        run: |
          echo "=== Build output structure ==="
          ls -la dist/
          
          if [ -d "dist/dist" ]; then
            echo "❌ Error: Nested dist/dist/ detected"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Error: dist/index.html not found"
            exit 1
          fi
          
          echo "✅ Build output verified"

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results-${{ steps.date.outputs.date }}-${{ github.sha }}
          path: |
            frontend/.lighthouseci/
          if-no-files-found: warn
          retention-days: 30

      - name: Configure Git user
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.name "${{ secrets.GIT_USER_NAME }}"
          git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Commit daily marker (morning)
        if: github.event_name != 'pull_request'
        working-directory: .
        run: |
          DATE=$(date +'%Y-%m-%d')
          mkdir -p data/quality-checks
          echo "morning_run=$(date -u)" > "data/quality-checks/morning-${DATE}.txt"
          git add "data/quality-checks/morning-${DATE}.txt"
          git commit -m "auto: morning quality check ${DATE}" || echo "No changes to commit"

          git fetch origin master
          git pull --rebase origin master || {
            echo "Rebase failed, using merge..."
            git rebase --abort || true
            git pull origin master
          }

          git push origin HEAD:master

      - name: Comment on PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const manifestPath = 'frontend/.lighthouseci/manifest.json';
            
            let comment = '## Lighthouse CI Results\n\n';
            
            if (fs.existsSync(manifestPath)) {
              const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
              comment += 'Performance tests completed successfully!\n\n';
              comment += `- Total runs: ${manifest.length}\n`;
              comment += `- Artifacts available in workflow run\n`;
            } else {
              comment += 'Lighthouse CI completed, but manifest not found. Check artifacts for details.\n';
            }
            
            comment += '\n---\n*Automated Lighthouse CI Report*';
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Create morning report issue
        if: github.event.schedule == '0 0 * * *'
        uses: actions/github-script@v7
        with:
          script: |
            const date = '${{ steps.date.outputs.date }}';
            const issueBody = `## 朝の品質チェックレポート ${date}

            ### Lighthouse CI 実行結果
            - ✅ フロントエンドビルド成功
            - ✅ Lighthouse CI 実行完了
            - 📊 詳細レポートは [Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) を参照

            ### チェック項目
            - TypeScript型チェック
            - ESLint品質チェック
            - パフォーマンス測定
            - アクセシビリティ評価
            - ベストプラクティス確認

            ---
            *自動生成レポート by GitHub Actions*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[品質レポート] 朝の定期チェック ${date}`,
              body: issueBody,
              labels: ['lighthouse', 'performance', 'automated']
            });


  # ====================================================================
  # 夜: Data Quality & Security Check
  # ====================================================================
  evening-quality:
    if: github.event.schedule == '0 12 * * *' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Evening Quality Check (Lint, Security, Safety)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install analysis tools
        run: |
          pip install ruff bandit safety jq

      - name: Run Ruff linting
        id: ruff
        continue-on-error: true
        run: |
          ruff check airflow/ scripts/ > ruff-report.txt 2>&1 || true
          echo "ruff_issues=$(wc -l < ruff-report.txt)" >> $GITHUB_OUTPUT

      - name: Run Bandit security scan
        id: bandit
        continue-on-error: true
        run: |
          bandit -r airflow/ scripts/ -f json -o bandit-report.json || true
          echo "bandit_issues=$(jq '.results | length' bandit-report.json 2>/dev/null || echo 0)" >> $GITHUB_OUTPUT

      - name: Run Safety dependency check
        id: safety
        continue-on-error: true
        run: |
          pip freeze | safety check --json > safety-report.json || true
          echo "safety_issues=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo 0)" >> $GITHUB_OUTPUT

      - name: Configure Git user
        run: |
          git config --local user.name "${{ secrets.GIT_USER_NAME }}"
          git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Commit daily marker (evening)
        run: |
          DATE=$(date +'%Y-%m-%d')
          mkdir -p data/quality-checks
          echo "evening_run=$(date -u)" > "data/quality-checks/evening-${DATE}.txt"
          git add "data/quality-checks/evening-${DATE}.txt"
          git commit -m "auto: evening quality check ${DATE}" || echo "No changes to commit"

          git fetch origin master
          git pull --rebase origin master || {
            echo "Rebase failed, using merge..."
            git rebase --abort || true
            git pull origin master
          }

          git push origin HEAD:master

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create evening report issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = '${{ steps.date.outputs.date }}';
            const ruff = '${{ steps.ruff.outputs.ruff_issues }}' || '0';
            const bandit = '${{ steps.bandit.outputs.bandit_issues }}' || '0';
            const safety = '${{ steps.safety.outputs.safety_issues }}' || '0';

            const issueBody = `## 夜の品質チェックレポート ${date}

            ### コード品質チェック結果
            - 🔍 Ruff: ${ruff} 件
            - 🔒 Bandit: ${bandit} 件
            - 🛡️ Safety: ${safety} 件

            ### チェック項目
            - Python コードスタイル検証
            - セキュリティ脆弱性スキャン
            - 依存関係の安全性確認

            📊 詳細レポートは [Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) を参照

            ---
            *自動生成レポート by GitHub Actions*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[品質レポート] 夜の定期チェック ${date}`,
              body: issueBody,
              labels: ['quality', 'security', 'automated', 'evening-check']
            });

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports-${{ steps.date.outputs.date }}
          path: |
            ruff-report.txt
            bandit-report.json
            safety-report.json
          if-no-files-found: ignore
          retention-days: 30
