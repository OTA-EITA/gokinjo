"""Notification Functions"""

import logging
from typing import Dict, List
from datetime import datetime


def create_completion_report(
    execution_date: str, dag_run_id: str, load_summary: Dict, safety_scores: List[Dict]
) -> str:
    """ETL完了レポート作成"""

    report = f"""
Tokyo Crime & School ETL Pipeline Complete!

Execution Details:
• Execution Date: {execution_date}
• DAG Run ID: {dag_run_id}
• Completion Time: {datetime.now().isoformat()}

Database Statistics:
• Total Areas: {load_summary.get("total_areas", "N/A")}
• Total Schools: {load_summary.get("total_schools", "N/A")}
• Total Crimes: {load_summary.get("total_crimes", "N/A")}
• Priority 2 Areas Added: {load_summary.get("priority_2_areas", "N/A")}

Safety Scores:
• Schools Processed: {len(safety_scores) if safety_scores else 0}

Phase 2 Status: SUCCESSFUL
• 台東区データ: Complete
• 文京区データ: Complete

Next Steps:
1. Test frontend with new data
2. Verify API endpoints  
3. Check map display for 台東区・文京区
4. Ready for Priority 3 expansion

---
Generated by Tokyo Crime & School ETL Pipeline
    """

    return report.strip()


def log_completion_report(report: str) -> None:
    """完了レポートをログ出力"""
    logging.info("ETL Completion Report:")
    for line in report.split("\n"):
        if line.strip():
            logging.info(line)


def send_completion_notification(
    execution_date: str, dag_run_id: str, load_summary: Dict, safety_scores: List[Dict]
) -> Dict:
    """ETL完了通知送信"""

    # レポート作成
    report = create_completion_report(
        execution_date, dag_run_id, load_summary, safety_scores
    )

    # ログ出力
    log_completion_report(report)

    # 将来的にはSlack/Email通知に拡張
    # slack_notification(report)
    # email_notification(report)

    return {
        "status": "sent",
        "notification_time": datetime.now().isoformat(),
        "report_length": len(report),
        "recipients": ["log"],  # 将来は ['log', 'slack', 'email']
    }


def log_error_notification(task_name: str, error_msg: str) -> None:
    """エラー通知"""
    error_report = f"""
ETL Pipeline Error in {task_name}

Error Details:
{error_msg}

Error Time: {datetime.now().isoformat()}

Recommended Actions:
1. Check Airflow logs for detailed error trace
2. Verify database connectivity
3. Check file system permissions
4. Validate input data integrity
    """

    logging.error("ETL Error Report:")
    for line in error_report.split("\n"):
        if line.strip():
            logging.error(line)
