"""
Notification Functions

設計書に基づく分離DAG対応の通知機能：
- 犯罪ETL完了通知：月次実行結果レポート
- 学校ETL完了通知：年次実行結果レポート
- エラー通知：DAG別のエラー報告
"""

import logging
from typing import Dict, List
from datetime import datetime
from tokyo_etl.utils.task_logging import (
    log_task_start,
    log_task_complete,
)
from tokyo_etl.utils.task_results import get_task_result


def send_crime_completion_notification_task(**context) -> None:
    """
    犯罪ETL完了通知（犯罪DAG専用）

    犯罪データ更新と安全スコア再計算の完了を通知します。
    """
    log_task_start("crime_completion_notification", **context)

    try:
        # 前タスクの結果取得
        load_stats = get_task_result(
            context["task_instance"], "load_crime_to_postgis", "load_stats"
        )
        safety_result = get_task_result(
            context["task_instance"], "recalculate_safety_scores", "safety_calculation"
        )

        # 犯罪ETL完了レポート作成
        report = create_crime_completion_report(
            context["ds"], context["dag_run"].run_id, load_stats, safety_result
        )

        # 通知送信
        send_crime_notification(report)

        log_task_complete(
            "crime_completion_notification", report_size=len(report), **context
        )

    except Exception as e:
        log_error_notification("crime_completion_notification", str(e))
        raise


def send_school_completion_notification_task(**context) -> None:
    """
    学校ETL完了通知（学校DAG専用）

    学校データ同期と統廃合処理の完了を通知します。
    """
    log_task_start("school_completion_notification", **context)

    try:
        # 前タスクの結果取得
        sync_result = get_task_result(
            context["task_instance"], "sync_school_to_postgis", "sync_result"
        )

        # 学校ETL完了レポート作成
        report = create_school_completion_report(
            context["ds"], context["dag_run"].run_id, sync_result
        )

        # 通知送信
        send_school_notification(report)

        log_task_complete(
            "school_completion_notification", report_size=len(report), **context
        )

    except Exception as e:
        log_error_notification("school_completion_notification", str(e))
        raise


def create_crime_completion_report(
    execution_date: str, dag_run_id: str, load_stats: Dict, safety_result: Dict
) -> str:
    """
    犯罪ETL完了レポート作成
    """
    report = f"""
🚨 Tokyo Crime Data ETL Pipeline Complete!

📅 Execution Details:
• Execution Date: {execution_date}
• DAG Run ID: {dag_run_id}
• Completion Time: {datetime.now().isoformat()}

📊 Crime Data Statistics:
• New Crime Records: {load_stats.get("inserted", 0)}
• Updated Records: {load_stats.get("updated", 0)}
• Total Crimes in DB: {load_stats.get("total_crimes", "N/A")}
• Covered Wards: {load_stats.get("covered_wards", "N/A")}
• Crime Types: {load_stats.get("crime_types", "N/A")}
• Data Period: {load_stats.get("earliest_crime", "N/A")} ~ {load_stats.get("latest_crime", "N/A")}

🏫 Safety Score Update:
• Schools Updated: {safety_result.get("updated_schools", 0)}
• Average Safety Score: {safety_result.get("average_score", "N/A"):.1f}
• Very Safe Schools (90+): {safety_result.get("score_distribution", {}).get("very_safe_count", 0)}
• Safe Schools (70-89): {safety_result.get("score_distribution", {}).get("safe_count", 0)}
• Moderate Schools (50-69): {safety_result.get("score_distribution", {}).get("moderate_count", 0)}
• Caution Schools (<50): {safety_result.get("score_distribution", {}).get("caution_count", 0)}

✅ Monthly Crime ETL Status: SUCCESSFUL
• Data Download: Complete
• Data Transformation: Complete  
• PostGIS Loading: Complete
• Safety Score Recalculation: Complete

🎯 Next Crime ETL: {get_next_crime_execution_date(execution_date)}

---
Generated by Tokyo Crime ETL Pipeline (Monthly)
    """

    return report.strip()


def create_school_completion_report(
    execution_date: str, dag_run_id: str, sync_result: Dict
) -> str:
    """
    学校ETL完了レポート作成
    """
    report = f"""
🏫 Tokyo School Data ETL Pipeline Complete!

📅 Execution Details:
• Execution Date: {execution_date}
• DAG Run ID: {dag_run_id}
• Completion Time: {datetime.now().isoformat()}

📊 School Data Statistics:
• New Schools Added: {sync_result.get("new_count", 0)}
• Schools Updated: {sync_result.get("updated_count", 0)}
• Schools Closed: {sync_result.get("closed_count", 0)}
• Total Active Schools: {sync_result.get("active_schools", "N/A")}
• Covered Wards: {sync_result.get("covered_wards", "N/A")}

🏛️ School Breakdown:
• Elementary Schools: {sync_result.get("elementary_count", 0)}
• Junior High Schools: {sync_result.get("junior_high_count", 0)}
• High Schools: {sync_result.get("high_count", 0)}
• Average Safety Score: {sync_result.get("avg_safety_score", "N/A")}

🔄 Sync Operations:
• New School Safety Scores Initialized: {len(sync_result.get("new_schools", []))}
• School Consolidations Processed: {sync_result.get("closed_count", 0)}

✅ Annual School ETL Status: SUCCESSFUL
• Data Download: Complete
• Data Transformation: Complete
• PostGIS Synchronization: Complete
• Safety Score Initialization: Complete

🎯 Next School ETL: {get_next_school_execution_date(execution_date)}

---
Generated by Tokyo School ETL Pipeline (Annual)
    """

    return report.strip()


def create_completion_report(
    execution_date: str, dag_run_id: str, load_summary: Dict, safety_scores: List[Dict]
) -> str:
    """ETL完了レポート作成（従来版・互換性維持）"""
    report = f"""
Tokyo Crime & School ETL Pipeline Complete!

Execution Details:
• Execution Date: {execution_date}
• DAG Run ID: {dag_run_id}
• Completion Time: {datetime.now().isoformat()}

Database Statistics:
• Total Areas: {load_summary.get("total_areas", "N/A")}
• Total Schools: {load_summary.get("total_schools", "N/A")}
• Total Crimes: {load_summary.get("total_crimes", "N/A")}
• Priority 2 Areas Added: {load_summary.get("priority_2_areas", "N/A")}

Safety Scores:
• Schools Processed: {len(safety_scores) if safety_scores else 0}

Phase 2 Status: SUCCESSFUL
• 台東区データ: Complete
• 文京区データ: Complete

Next Steps:
1. Test frontend with new data
2. Verify API endpoints  
3. Check map display for 台東区・文京区
4. Ready for Priority 3 expansion

---
Generated by Tokyo Crime & School ETL Pipeline
    """

    return report.strip()


def send_crime_notification(report: str) -> Dict:
    """
    犯罪ETL通知送信
    """
    # ログ出力
    log_completion_report(report, "CRIME ETL")

    # 将来的にはSlack/Email通知に拡張
    # slack_notification(report, channel="#crime-data")
    # email_notification(report, subject="Crime ETL Complete")

    return {
        "status": "sent",
        "notification_time": datetime.now().isoformat(),
        "report_length": len(report),
        "recipients": ["log"],  # 将来は ['log', 'slack', 'email']
        "notification_type": "crime_etl_completion",
    }


def send_school_notification(report: str) -> Dict:
    """
    学校ETL通知送信
    """
    # ログ出力
    log_completion_report(report, "SCHOOL ETL")

    # 将来的にはSlack/Email通知に拡張
    # slack_notification(report, channel="#school-data")
    # email_notification(report, subject="School ETL Complete")

    return {
        "status": "sent",
        "notification_time": datetime.now().isoformat(),
        "report_length": len(report),
        "recipients": ["log"],  # 将来は ['log', 'slack', 'email']
        "notification_type": "school_etl_completion",
    }


def log_completion_report(report: str, report_type: str = "ETL") -> None:
    """完了レポートをログ出力"""
    logging.info(f"{report_type} Completion Report:")
    for line in report.split("\n"):
        if line.strip():
            logging.info(line)


def send_completion_notification(
    execution_date: str, dag_run_id: str, load_summary: Dict, safety_scores: List[Dict]
) -> Dict:
    """ETL完了通知送信（従来版・互換性維持）"""
    # レポート作成
    report = create_completion_report(
        execution_date, dag_run_id, load_summary, safety_scores
    )

    # ログ出力
    log_completion_report(report)

    # 将来的にはSlack/Email通知に拡張
    # slack_notification(report)
    # email_notification(report)

    return {
        "status": "sent",
        "notification_time": datetime.now().isoformat(),
        "report_length": len(report),
        "recipients": ["log"],  # 将来は ['log', 'slack', 'email']
    }


def get_next_crime_execution_date(current_date: str) -> str:
    """
    次回犯罪ETL実行日取得
    """
    from dateutil.relativedelta import relativedelta
    from datetime import datetime

    current = datetime.fromisoformat(current_date)
    next_execution = current.replace(day=5) + relativedelta(months=1)

    return next_execution.strftime("%Y-%m-%d (Monthly)")


def get_next_school_execution_date(current_date: str) -> str:
    """
    次回学校ETL実行日取得
    """
    from dateutil.relativedelta import relativedelta
    from datetime import datetime

    current = datetime.fromisoformat(current_date)
    next_execution = current.replace(month=4, day=5) + relativedelta(years=1)

    return next_execution.strftime("%Y-%m-%d (Annual)")


def log_error_notification(task_name: str, error_msg: str) -> None:
    """エラー通知"""
    error_report = f"""
ETL Pipeline Error in {task_name}

Error Details:
{error_msg}

Error Time: {datetime.now().isoformat()}

Recommended Actions:
1. Check Airflow logs for detailed error trace
2. Verify database connectivity
3. Check file system permissions
4. Validate input data integrity
    """

    logging.error("ETL Error Report:")
    for line in error_report.split("\n"):
        if line.strip():
            logging.error(line)
